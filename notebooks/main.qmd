```{julia}
using DmspElfinConjunction
```

## Trajectory conjunction finder

```{julia}
using Speasy

id = 16
probe = "b"
test_timerange = ("2020-01-08", "2020-01-09")

dmsp_x_geo = Speasy.ssc_get_data("dmspf$id", test_timerange..., "geo")
elfin_x_geo = Speasy.ssc_get_data("elfin$probe", test_timerange..., "geo")
```

### Convert coordinates to (MLT, MLat, Radius)

```{julia}
using Aacgm
using DimensionalData.Dimensions: TimeDim
using IRBEM

function Aacgm.geo2aacgm(x)
    ts = times(x)
    aacgm = Aacgm.geo2aacgm.(eachslice(x, dims=2)..., ts)
    tdim = Ti(ts)
    mlat = DimArray(getindex.(aacgm, 1), tdim)
    mlon = DimArray(getindex.(aacgm, 2), tdim)
    return DimStack((; mlat, mlon))
end

function IRBEM.get_mlt(x)
    ts = times(x)
    mlt = IRBEM.get_mlt.(eachslice(x, dims=1), ts)
    tdim = Ti(ts)
    return DimArray(mlt, tdim)
end

dmsp_x_mlt = get_mlt(dmsp_x_geo)
dmsp_x_aacgm = geo2aacgm(dmsp_x_geo)
elx_mlt = get_mlt(elfin_x_geo)
elx_aacgm = geo2aacgm(elfin_x_geo)
```


Compare the MLAT of DMSP from our calculation and the one in the file

```{julia}
using SPEDAS: tplot

f = Figure()
dmsp_tvars = (dms_ds.el_d_flux, dms_ds.ion_d_flux, (dmspf16_aacgm.mlat, dms_ds.mlat), (dmspf16_mlt, dms_ds.mlt))
elx_tvars = (elx_aacgm.mlat, elx_mlt)
tplot(f[1, 1], dmsp_tvars)
tplot(f[1, 2], elx_tvars)
f
```