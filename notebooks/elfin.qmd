---
title: "ELFIN Data Analysis"
engine: julia
---

# ELFIN Data Analysis

This document analyzes ELFIN satellite data to find continuous time ranges and prepare for conjunction analysis with DMSP.

## Loading ELFIN Flux Data

```{julia}
using PySPEDAS.Projects
using PySPEDAS
using PySPEDAS.PythonCall
using Speasy
using Dates
using DimensionalData

probe = "b"
tr = ["2021-01-01", "2021-02-01"]

# Load ELFIN EPD data
epd_ds = elfin.epd(tr; probe, level="l2")
elx_flux = DimArray(epd_ds.elb_pef_hs_nflux_para)
```

## Finding Continuous Time Ranges

```{julia}
using SPEDAS
using SPEDAS: find_continuous_timeranges

continuous_ranges = find_continuous_timeranges(elx_flux, Second(60))

# Print the continuous time ranges
println("Found $(length(continuous_ranges)) continuous time ranges:")
for (i, (start_time, end_time)) in enumerate(continuous_ranges)
    duration = end_time - start_time
    println("Range $i: $start_time to $end_time ($(round(duration, Minute)))")
end
```

Download data from Madrigal for each continuous time range

```{julia}
using MadrigalWeb
using Dates
MadrigalWeb.set_default_server()
MadrigalWeb.set_default_user("Zijin+Zhang", "zijin@ucla.edu")

# timeranges_day = sort(collect(Set((floor(t0, Day), ceil(t1, Day)) for (t0, t1) in continuous_ranges)))
server = MadrigalWeb.Default_server[]

function dmsp_download(timerange, inst=8100, kindat=10216)
    MadrigalWeb.download_files(inst, kindat, timerange...)
end

id = 16
dt = DateTime(2021, 1, 2)

function dmsp_download(t::DateTime, id=16, format="hdf5")
    # <!-- '/opt/openmadrigal/madroot/experiments3/2020/dms/31dec20/dms_20201231_16e.001.hdf5' -->
    prefix = "/opt/openmadrigal/madroot/experiments3/"
    _dayofmonth = lpad(dayofmonth(t), 2, '0')
    _monthabbr = Dates.monthabbr(t) |> lowercase
    _year = string(Dates.year(t))
    _yearabbr = _year[3:4]
    _date = Dates.format(t, "yyyymmdd")
    filename = prefix * "$(_year)/dms/$(_dayofmonth)$(_monthabbr)$(_yearabbr)/dms_$(_date)_$(id)e.001.$format"
    MadrigalWeb.downloadFile(filename)
end

dmsp_download(dt)
```


## Loading ELFIN Position Data


```{julia}
probe = "b"
test_timerange = ("2020-01-08", "2020-01-09")

dmspf16_geo = Speasy.ssc_get_data("dmspf16", test_timerange..., "geo")
elfinx_geo = Speasy.ssc_get_data("elfin$probe", test_timerange..., "geo")

epd_ds = elfin.epd(test_timerange; probe, level="l2")
elx_flux = DimArray(getproperty(epd_ds, Symbol(:el, probe, :_pef_hs_nflux_para)))
elx_energies = pyconvert(Vector{Float64}, PySPEDAS.get_data("el$(probe)_pef_energies_mean"; xarray=false))
elx_flux = rebuild(elx_flux, dims=(Ti(parent(elx_flux.dims[1])), Y(elx_energies)))


set_if_valid!(elx_flux.metadata, :yscale => identity, :scale => log10, :colorrange => (1e3, 1e8))
replace!(elx_flux, 0 => NaN)
```

Interpolate ELFIN position data to 1 second resolution



Overplot the fluxes

```{julia}
using SPEDAS: tplot

tvars = (dms_ds.el_d_flux, elx_flux, (dmspf16_aacgm.mlat, elx_aacgm.mlat), (dmspf16_mlt, elx_mlt))
tplot(tvars)
```
